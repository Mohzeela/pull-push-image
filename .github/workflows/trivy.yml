# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: build

on:
  push:
    branches: [ "main" ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ "main" ]
  schedule:
    - cron: '43 20 * * 5'

permissions:
  contents: read
  
env:  
    image_name: mcr.microsoft.com/dotnet/sdk:6.0
    my_image_name: mohcontreg.azurecr.io/dotnet/sdk:6.0
jobs:
  build:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    name: Build
    runs-on: "ubuntu-18.04"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        

      - name: Pull an Image from Dockerhub
        run: |
           docker pull $image_name 
           docker tag $image_name $my_image_name
#   scan_image:
#       name: scan_image
#       runs-on: "ubuntu-18.04"
#       steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@2a2157eb22c08c9a1fac99263430307b8d1bc7a2
        with:
          image-ref: $my_image_name
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
  push_repo:
      name: push_repo
      runs-on: "ubuntu-18.04"  
      if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
      needs: [scan_image]
      steps:
      - name: push scanned image to ECR
        
        run: |
           echo "it's working"
#   aws ecr get-login-password --region $HC_GLOBAL_AWS_REGION | sudo docker login --username AWS --password-stdin $HC_GLOBAL_ECR_URL
        #  sudo docker push $HC_GLOBAL_ECR_URL/$IMAGE_NAME:$GITHUB_RUN_ID
       #   sudo docker logout $HC_GLOBAL_ECR_URL
        #  sudo docker rmi $(sudo docker images -q ${HC_GLOBAL_ECR_URL}/${IMAGE_NAME})
        
