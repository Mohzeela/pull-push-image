name: Moh Pull and scan external images pipeline

on: 
#   push:
#     branches:
#       - main
# actions/**'
   workflow_dispatch:

permissions:
  contents: read
  
env:  
  EXTERNAL_IMAGE_NAME:  nginx:alpine
  GLOBAL_REPO_NAME: ${{ secrets.GLOBAL_REPO_NAME }}    
  IMAGE_TAG: latest
  GLOBAL_ECR_URL: ${{ secrets.GLOBAL_ECR_URL }}               
  GLOBAL_EKS_DEVSTAGE: ${{ secrets.GLOBAL_EKS_DEVSTAGE }}            
  GLOBAL_AWS_REGION: ${{ secrets.GLOBAL_AWS_REGION }}       
  GLOBAL_DEVSTAGE_IAM_ACCESSKEY: ${{ secrets.GLOBAL_DEVSTAGE_IAM_ACCESSKEY }}
  GLOBAL_DEVSTAGE_IAM_SECRET: ${{ secrets.GLOBAL_DEVSTAGE_IAM_SECRET}}
  AWS_CREDS_DIRECTORY: ~/.aws
  HC_FROM_IMAGE: ${{ secrets.GLOBAL_CORE_3_IMAGE }}    
jobs:
  clean-workspace-before:
    runs-on: self-hosted
    steps:
    - name: Cleanup Workspace
      run: |
          rm -rf "${{ github.workspace }}" 
  
  pull-scan-image:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
    name: pull-scan-image
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Pull Image from Public Repo
        run: |
           docker pull $EXTERNAL_IMAGE_NAME
           
      - name: Run Trivy vulnerability scanner
        run: |
           trivy image --exit-code 1 --severity HIGH,CRITICAL $EXTERNAL_IMAGE_NAME
       

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: '${{ env.EXTERNAL_IMAGE_NAME }}'
#           format: 'template'
#           template: '@/contrib/sarif.tpl'
#           output: 'trivy-results.sarif'
#           severity: 'CRITICAL,HIGH'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v2
#         with:
#           sarif_file: 'trivy-results.sarif'

  log-into-aws:
       runs-on: self-hosted
       needs: [clean-workspace-before, pull-scan-image]
       steps:
       - name: Log Into AWS
         run: | 
          if [ -d "$HC_AWS_CREDS_DIRECTORY" ]; then sudo rm -Rf $HC_AWS_CREDS_DIRECTORY; fi
          aws configure set aws_access_key_id $GLOBAL_DEVSTAGE_IAM_ACCESSKEY
          aws configure set aws_secret_access_key $GLOBAL_DEVSTAGE_IAM_SECRET
          aws configure set default.region $GLOBAL_AWS_REGION
          aws ecr get-login-password --region $GLOBAL_AWS_REGION 
          
  push-image:
      name: push image to ECR
      runs-on: self-hosted 
      if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
      needs: [clean-workspace-before, pull-scan-image, log-into-aws]
      steps:
      - name: push scanned image to ECR
        run: |
           echo "it's working"
           sudo docker tag $EXTERNAL_IMAGE_NAME  $GLOBAL_ECR_URL/$GLOBAL_REPO_NAME
           sudo docker login -u AWS -p $(aws ecr get-login-password --region $GLOBAL_AWS_REGION) $GLOBAL_ECR_URL/$GLOBAL_REPO_NAME
           sudo docker push $GLOBAL_ECR_URL/$GLOBAL_REPO_NAME
           sudo docker logout $GLOBAL_ECR_URL/$GLOBAL_REPO_NAME
           sudo docker rmi $GLOBAL_ECR_URL/$GLOBAL_REPO_NAME
  clean-workspace-after:
      if: always()
      needs: [pull-scan-image, push-image]
      runs-on: self-hosted
      steps:
      - name: Cleanup Workspace
        run: |
          if [ -d "$HC_AWS_CREDS_DIRECTORY" ]; then sudo rm -rf $HC_AWS_CREDS_DIRECTORY; fi 
          rm -rf "${{ github.workspace }}"
